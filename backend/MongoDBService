-- Roblox MongoDB Reloaded v1.0
-- Download Source: Github or Website
-- Updates Channel: Stable
-- Pro Version: False
-- Build Date: 4.19.2022

-- Please read the guide before using: 
-- HTTP requests must be turned on in the game settings!
-- This work is licenced and you should not republish this module.
-- You must have the Frontend installed and working before using the Backend.


-- || MUST BE PUT IN A MODULE! || --


--[[ Services, Variables & other modules. ]]--
local HttpService = game:GetService("HttpService")
local Utility = require(script.Functions.Utility)
local Data = script.Functions.LocalStorage.Data
local Hostname = script.Configuration.Hostname
local Username = script.Configuration.Username
local Password = script.Configuration.Password

local rmdb = {}
rmdb.__index = rmdb

--[[ Internal Functions ]]--
function rmdb:GetData(combinedKey, default)
	local response
	local data
	local AuthorizationBase64String = Utility.BaseEncode(Username..":"..Password)
	
	pcall(function ()
		response = HttpService:GetAsync(Hostname.."/get-data/"..combinedKey, true, {["Authorization"] =  "Basic "..AuthorizationBase64String})
		data = HttpService:JSONDecode(response)
	end)
	
	if not data then return default end
	
	if data.Data ~= nil then
		return data.Data
	else
		return default
	end
end

function rmdb:SaveData(combinedKey)	
	local response
	local data
	
	local saveData = HttpService:JSONDecode(Data:FindFirstChild(combinedKey).Value)
	local sendData = HttpService:JSONEncode({
		SaveData = saveData.Data,
		DataType = typeof(saveData.Data)
	})
	
	local AuthorizationBase64String = Utility.BaseEncode(Username..":"..Password)
	
	pcall(function ()
		response = HttpService:PostAsync(Hostname.."/save-data/"..combinedKey, sendData, Enum.HttpContentType.ApplicationJson, false, {["Authorization"] =  "Basic "..AuthorizationBase64String})
	end)
	
	return true
end

--[[ Public Functions ]]--
function rmdb:CreateConnection(key, player)
	local newConnection = {}
	setmetatable(newConnection, rmdb)
	
	newConnection["Key"] = key
	newConnection["Player"] = player.UserId
	newConnection["CombinedKey"] = key.."-"..player.UserId
	
	return newConnection
end

function rmdb:GetStore(key, player)
	if not key or not player then return end
	
	if not Data:FindFirstChild(key.."-"..player.UserId) then
		local store = self:CreateConnection(key, player)
		
		game:BindToClose(function()
			store:Save(store.CombinedKey)
		end)
		
		game.Players.PlayerRemoving:Connect(function(plr)
			if plr.UserId == player.UserId then
				store:Save(store.CombinedKey)
			end
		end)
		
		return store
	else
		local store = self:CreateConnection(key, player)
		local Data = HttpService:JSONDecode(Data:FindFirstChild(key.."-"..player.UserId).Value)
		store.Data = Data.Data
		
		return store
	end
end

function rmdb:Get(default)	
	if not default then return end
	
	if self.Data then
		if not Data:FindFirstChild(self.CombinedKey) then
			local DataValue = Instance.new("StringValue", Data)
			DataValue.Name = self.CombinedKey
			DataValue.Value = HttpService:JSONEncode({
				Data = self.Data
			})		
		end
		
		local returnData = HttpService:JSONDecode(Data:FindFirstChild(self.CombinedKey).Value).Data 
		return returnData
	else
		self.Data = self:GetData(self.CombinedKey, default)
		
		if not Data:FindFirstChild(self.CombinedKey) then
			local DataValue = Instance.new("StringValue", Data)
			DataValue.Name = self.CombinedKey
			DataValue.Value = HttpService:JSONEncode({
				Data = self.Data
			})				
		end		
		
		local returnData = HttpService:JSONDecode(Data:FindFirstChild(self.CombinedKey).Value).Data 
		return returnData
	end
end

function rmdb:Set(data)
	if not data then return end
	
	self.Data = data
	Data:FindFirstChild(self.CombinedKey).Value = HttpService:JSONEncode({
		Data = data
	})
	return data
end

function rmdb:Save(CombinedKey)
	if self:SaveData(CombinedKey) then
		print("Successfully saved data for - ", CombinedKey)
	else
		warn("Error While saving Data for - ", CombinedKey)
	end
end

return rmdb
